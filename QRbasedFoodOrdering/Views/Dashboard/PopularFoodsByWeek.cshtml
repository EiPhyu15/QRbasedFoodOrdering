

 @model IEnumerable<QRbasedFoodOrdering.Models.PopularFoodReportViewModel>
@using Newtonsoft.Json
@using System.Globalization

@{
    ViewData["Title"] = "Popular Foods By Week";

    var chartData = Model
        .GroupBy(m => $"{m.StartDate:yyyy-MM-dd} to {m.EndDate:yyyy-MM-dd}")
        .ToDictionary(
            g => g.Key,
            g => g.Select(x => new
            {
                x.FoodItemName,
                // force invariant numeric formatting
                TotalQuantity = double.Parse(x.TotalQuantity.ToString(), CultureInfo.InvariantCulture)
            }).ToList()
        );

    var chartDataJson = JsonConvert.SerializeObject(chartData);
}

<h2>Popular Foods By Week</h2>

<div class="chart-container">
    <canvas id="weeklyChart"></canvas>
</div>
<div id="no-data-msg" style="display:none; text-align:center; margin-top:1rem;">
    <strong>No data available</strong>
</div>

<style>
    .chart-container {
        width: 100%;
        height: 450px; /* fixed size */
        position: relative;
    }

    #weeklyChart {
        width: 100% !important;
        height: 100% !important;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var chartData = @Html.Raw(chartDataJson);
        console.log("chartData:", chartData);

        var weekLabels = Object.keys(chartData || {});
        if (weekLabels.length === 0) {
            document.getElementById("no-data-msg").style.display = "block";
            return;
        }

        var allFoods = [...new Set([].concat(...Object.values(chartData).map(arr => arr.map(f => f.FoodItemName))))];

        var palette = [
            'rgba(54,162,235,0.7)',
            'rgba(255,99,132,0.7)',
            'rgba(255,206,86,0.7)',
            'rgba(75,192,192,0.7)',
            'rgba(153,102,255,0.7)',
            'rgba(255,159,64,0.7)'
        ];

        var datasets = allFoods.map((food, idx) => ({
            label: food,
            data: weekLabels.map(week => {
                var item = chartData[week].find(f => f.FoodItemName === food);
                return item ? Number(item.TotalQuantity) : 0;
            }),
            backgroundColor: palette[idx % palette.length]
        }));

        // ✅ FIX: destroy old chart if exists
        if (window.weeklyChartInstance) {
            window.weeklyChartInstance.destroy();
        }

        var ctx = document.getElementById("weeklyChart").getContext("2d");
        window.weeklyChartInstance = new Chart(ctx, {
            type: "bar",
            data: { labels: weekLabels, datasets: datasets },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                plugins: {
                    title: { display: true, text: "Top Foods by Week" },
                    legend: { position: "top" }
                },
                scales: {
                    x: { stacked: false },
                    y: { beginAtZero: true }
                }
            }
        });
    });
</script>
